.. _input_files_csv:CSV file========For the .csv file to be read by :code:`ClayCode.builder`, the relative path needs to be referenced in the .yaml file. See :ref:`Input files: YAML <input_files_yaml>` more for information.File Structure--------------The file should be comprised of at least 3 columns:1. First column - :code:`sheet` with each row containing one of the following options:   - :code:`T` for tetrahedral occupancies      - :code:`O` for octahedral occupancies      - :code:`I` for interlayer ion occupancies (if the total layer charge is non-zero)      - :code:`C` for the tetrahedral, octahedral and total unit cell charges2. Second column - :code:`element` containing either:   - Atom names      - The oxidation state of clay atoms can be specified by adding the charge after the element name (e.g. Fe2)      - If the specified atom is not supported by :code:`ClayFF.ff`, :code:`ClayCode.builder` will try to assign it to a supported atom of same charge and re-assign the occupancies   - Whether the charge (:code:`sheet: C`) is for the :code:`T` layer, :code:`O` layer or the :code:`tot` total3. Subsequent columns - the clay name(s) with each row giving the corresponding value for that clay. One of these should match the :code:`SYSNAME` option in the corresponding .yaml file.Rules------Occupancies:~~~~~~~~~~~~- Tetrahedral (:code:`T`) occupancies should sum to **4** for each sheet- Dioctahedral (:code:`O`) occupancies should sum to **4** for each sheet- Trioctahedral (:code:`O`) occupancies should sum to **3** for each sheetFor example, a dioctahedral 2:1 clay (TOT) should have :code:`T` occupancies of **8** and :code:`O` occupancies of **4**.Experimental stoichiometries do not necessarily sum up to integer occupancies. :code:`ClayCode.builder` will first process the target composition such that the occupancies match those expected for the specified unit cell type